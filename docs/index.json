[{"categories":["Android"],"contents":"環境 Android Studio 4.2.1\nminSdkVersion 26\ntargetSdkVersion 30\nImageViewの色をつけようとしたけどつけられなかった 以下のような拡張関数を作って ImageViewに セットした SVG の色をつけようとしました。\nfun ImageView.setColor(colorCode: Int) {\rsetColorFilter(colorCode, PorterDuff.Mode.SRC_IN)\r}\rなお colorCode には、color.xml のリソースを以下のような形で書いて渡していました。\nsaveIcon.setColor(R.color.red)\rエラーは出ないのに色がつかない しかし上記のコードでは意図した色がつかず、何故かグレーになってしまいました。\n以前上記の方法で SVG にグレーの色を付けた経験があったので、何故できないんだ、 なんで今回ももグレーになってしまうんだと悩みました。\nsetColorFilterに渡している引数が違った R.color.red で返ってくるのは、xml ファイルに記載された文字列と紐付いたリソース IDらしいです。\nIntの情報ではありますが、色情報ではないです。\nなので、上記の拡張関数は以下のように書き、リソースから色情報を取得しなくてはなりません。\nfun ImageView.setColor(colorCode: Int) {\rval color = ResourcesCompat.getColor(resources, colorCode, null)\rsetColorFilter(color, PorterDuff.Mode.SRC_IN)\r}\r偶然にも以前意図した色をつけることが出来てしまっていたので悩んでしまいました。\n今後足りていない values/xxxx.xml について理解を深めようと思います。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-33/","tags":["mobile",""],"title":"AndroidのsetColorFilterでハマった話"},{"categories":["Android"],"contents":"環境 Android Studio 4.2.0 及び 4.2.1\nminSdkVersion 26\ntargetSdkVersion 30\nAndroid Studioを 4.2.0にしたらレイアウトのDesignビューが表示されなくなった Android Studio を 4.2.0 にアップデートしたら、一部の Layout における Design ビューが\n表示されなくなりました。\n画面は以下のようになってます。\n「 String index out of range: -1 」 の詳細は以下。\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\rat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:47)\rat java.base/java.lang.String.charAt(String.java:693)\rat android.content.res.BridgeTypedArray.getType(BridgeTypedArray.java:1024)\rat android.content.res.BridgeTypedArray.getType(BridgeTypedArray.java:809)\rat android.content.res.BridgeTypedArray.getValue(BridgeTypedArray.java:778)\rat android.content.res.BridgeTypedArray.peekValue(BridgeTypedArray.java:847)\rat android.view.View.\u0026lt;init\u0026gt;(View.java:5951)\rat android.view.ViewGroup.\u0026lt;init\u0026gt;(ViewGroup.java:697)\rat android.widget.FrameLayout.\u0026lt;init\u0026gt;(FrameLayout.java:99)\rat com.android.layoutlib.bridge.MockView.\u0026lt;init\u0026gt;(MockView.java:55)\rat com.android.layoutlib.bridge.MockView.\u0026lt;init\u0026gt;(MockView.java:51)\rat com.android.layoutlib.bridge.MockView.\u0026lt;init\u0026gt;(MockView.java:47)\rat android.view.BridgeInflater.createViewFromTag(BridgeInflater.java:324)\rat android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:959)\rat android.view.LayoutInflater.rInflate_Original(LayoutInflater.java:1121)\rat android.view.LayoutInflater_Delegate.rInflate(LayoutInflater_Delegate.java:72)\rat android.view.LayoutInflater.rInflate(LayoutInflater.java:1095)\rat android.view.LayoutInflater.rInflateChildren(LayoutInflater.java:1082)\rat android.view.LayoutInflater.rInflate_Original(LayoutInflater.java:1124)\rat android.view.LayoutInflater_Delegate.rInflate(LayoutInflater_Delegate.java:72)\rat android.view.LayoutInflater.rInflate(LayoutInflater.java:1095)\rat android.view.LayoutInflater.rInflateChildren(LayoutInflater.java:1082)\rat android.view.LayoutInflater.rInflate_Original(LayoutInflater.java:1124)\rat android.view.LayoutInflater_Delegate.rInflate(LayoutInflater_Delegate.java:72)\rat android.view.LayoutInflater.rInflate(LayoutInflater.java:1095)\rat android.view.LayoutInflater.rInflateChildren(LayoutInflater.java:1082)\rat android.view.LayoutInflater.inflate(LayoutInflater.java:680)\rat android.view.LayoutInflater.inflate(LayoutInflater.java:499)\rat com.android.layoutlib.bridge.impl.RenderSessionImpl.inflate(RenderSessionImpl.java:325)\rat com.android.layoutlib.bridge.Bridge.createSession(Bridge.java:369)\rat com.android.tools.idea.layoutlib.LayoutLibrary.createSession(LayoutLibrary.java:141)\rat com.android.tools.idea.rendering.RenderTask.createRenderSession(RenderTask.java:710)\rat com.android.tools.idea.rendering.RenderTask.lambda$inflate$6(RenderTask.java:865)\rat com.android.tools.idea.rendering.RenderExecutor$runAsyncActionWithTimeout$2.run(RenderExecutor.kt:174)\rat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\rat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\rat java.base/java.lang.Thread.run(Thread.java:834)\r「 Render Problem 」の詳細は以下\njava.lang.reflect.InvocationTargetException\rat jdk.internal.reflect.GeneratedMethodAccessor971.invoke(Unknown Source)\rat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\rat java.base/java.lang.reflect.Method.invoke(Method.java:566)\rat android.view.BridgeInflater.lambda$createViewFromCustomInflater$0(BridgeInflater.java:259)\rat android.view.BridgeInflater.createViewFromCustomInflater(BridgeInflater.java:285)\rat android.view.BridgeInflater.onCreateView(BridgeInflater.java:122)\rat android.view.LayoutInflater.onCreateView(LayoutInflater.java:928)\rat android.view.LayoutInflater.onCreateView(LayoutInflater.java:948)\rat android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:1002)\rat android.view.BridgeInflater.createViewFromTag(BridgeInflater.java:309)\rat android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:959)\rat android.view.LayoutInflater.rInflate_Original(LayoutInflater.java:1121)\rat android.view.LayoutInflater_Delegate.rInflate(LayoutInflater_Delegate.java:72)\rat android.view.LayoutInflater.rInflate(LayoutInflater.java:1095)\rat android.view.LayoutInflater.rInflateChildren(LayoutInflater.java:1082)\rat android.view.LayoutInflater.rInflate_Original(LayoutInflater.java:1124)\rat android.view.LayoutInflater_Delegate.rInflate(LayoutInflater_Delegate.java:72)\rat android.view.LayoutInflater.rInflate(LayoutInflater.java:1095)\rat android.view.LayoutInflater.rInflateChildren(LayoutInflater.java:1082)\rat android.view.LayoutInflater.rInflate_Original(LayoutInflater.java:1124)\rat android.view.LayoutInflater_Delegate.rInflate(LayoutInflater_Delegate.java:72)\rat android.view.LayoutInflater.rInflate(LayoutInflater.java:1095)\rat android.view.LayoutInflater.rInflateChildren(LayoutInflater.java:1082)\rat android.view.LayoutInflater.inflate(LayoutInflater.java:680)\rat android.view.LayoutInflater.inflate(LayoutInflater.java:499)\rat com.android.layoutlib.bridge.impl.RenderSessionImpl.inflate(RenderSessionImpl.java:325)\rat com.android.layoutlib.bridge.Bridge.createSession(Bridge.java:369)\rat com.android.tools.idea.layoutlib.LayoutLibrary.createSession(LayoutLibrary.java:141)\rat com.android.tools.idea.rendering.RenderTask.createRenderSession(RenderTask.java:710)\rat com.android.tools.idea.rendering.RenderTask.lambda$inflate$6(RenderTask.java:865)\rat com.android.tools.idea.rendering.RenderExecutor$runAsyncActionWithTimeout$2.run(RenderExecutor.kt:174)\rat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\rat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\rat java.base/java.lang.Thread.run(Thread.java:834)\rCaused by: java.lang.StringIndexOutOfBoundsException: String index out of range: -1\rat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:47)\rat java.base/java.lang.String.charAt(String.java:693)\rat android.content.res.BridgeTypedArray.getType(BridgeTypedArray.java:1024)\rat android.content.res.BridgeTypedArray.getType(BridgeTypedArray.java:809)\rat android.content.res.BridgeTypedArray.getValue(BridgeTypedArray.java:778)\rat android.content.res.BridgeTypedArray.peekValue(BridgeTypedArray.java:847)\rat android.view.View.\u0026lt;init\u0026gt;(View.java:5951)\rat android.widget.TextView.\u0026lt;init\u0026gt;(TextView.java:996)\rat android.widget.EditText.\u0026lt;init\u0026gt;(EditText.java:87)\rat android.widget.EditText.\u0026lt;init\u0026gt;(EditText.java:83)\rat androidx.appcompat.widget.AppCompatEditText.\u0026lt;init\u0026gt;(AppCompatEditText.java:74)\rat androidx.appcompat.widget.AppCompatEditText.\u0026lt;init\u0026gt;(AppCompatEditText.java:69)\rat androidx.appcompat.app.AppCompatViewInflater.createEditText(AppCompatViewInflater.java:209)\rat androidx.appcompat.app.AppCompatViewInflater.createView(AppCompatViewInflater.java:127)\r... 34 more\r原因と対応方法 原因は、 EditView に以下の記述でした。\nandroid:autofillHints=\u0026quot;\u0026quot;\r何かの記事を見て Missing autofillHints attribute の警告を消すために書いていたのですが、\nこれを以下のように変えると不具合は解消しました。\nandroid:autofillHints='\u0026quot;\u0026quot;'\rただこの方法も根本的な解決になっておらず、後に不具合の原因になると思われるので\ntools:ignore=\u0026ldquo;Autofill\u0026rdquo; や android:importantForAutofill=\u0026ldquo;no\u0026rdquo; を\nつけたほうが良いと思われます。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-32/","tags":["Android Studio",""],"title":"Android Studioを4.2.0にしたらレイアウトのDesignビューが表示されなくなったので対応した件"},{"categories":["survey"],"contents":"「OpenAPI Generator Tool」とは OpenAPI Specification形式で記述されたYAMLやJSONのファイルをもとに、\nコード生成してくれるツールのことです。\n「OpenAPI Specification形式」とは REST APIの記述フォーマットのことです。\n 使用可能なエンドポイント(/○○○)と各エンドポイントでの操作(CRUD) 操作パラメータ各操作の入力と出力 認証方法 連絡先情報、ライセンス、利用規約およびその他の情報。  詳しい仕様は公式を参照してください。\n「OpenAPI仕様」で開発されているツールの紹介 公式 「Swagger」  Swagger Editor API仕様を書くためのエディタ Swagger UI ドキュメントを生成するツール Swagger Codegen コードを生成するツール  サードパーティ GUI Editor 「Stoplight Studio」 先程紹介した「Swagger Editor」の場合、 YAMLファイルを触っていくのですが、\n「Stoplight Studio」の場合は、\n直感的にGUI操作で記述することが出来ます。\n OpenAPI v2/v3対応 無料 「Prism」が統合されている Lintを利用してリアルタイムでエラーチェックできる  モックサーバ 「Prism」 「Prism」は、ターミナルからOpenAPI Specification形式で記述されたファイルを、\n読み込むことで簡単にAPIのモックサーバが起動できます。\n OpenAPI v2/v3対応 無料 ダイナミックレスポンス対応 リクエストのバリデーション対応 CORS対応  「Dredd」 「Dredd」は、OpenAPI Specification形式で記述されたファイルと、\nAPIサーバの検証を行うコマンドラインベースのテストツールになります。\n OpenAPI v2/v3対応 テストで利用できる言語が豊富  まとめ 今回、「FastAPI」で利用する「OpenAPI Generator Tool」を調べてみましたが、\n「FastAPI」で開発する際は、「FastAPI」に標準で実装されている\n機能を利用するのが現状では良さそうでした。\n上記を利用しない場合は、自分で機能を上書き拡張対応が必要そうです。\n「OpenAPI Specification形式」対応のサードパーティ系で、\n大変便利そうな「Stoplight Studio」/「Prism」/「Dredd」を、\n知ることができましたので、\nひとつひとつ導入検討していこうと思います。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-31/","tags":["openapi","generator"],"title":"「OpenAPI Generator Tool」について調べてみた"},{"categories":["FastAPI"],"contents":"「ロギング」とは 起こった出来事についての情報などを一定の形式で時系列に記録を蓄積することである。\nそのように記録されたデータのことを「ログ」という。\n「Middleware」の使用例 公式には、レスポンスに処理を追加する例が記載されています。\nimport time\rfrom fastapi import FastAPI, Request\rapp = FastAPI()\r@app.middleware(\u0026quot;http\u0026quot;)\rasync def add_process_time_header(request: Request, call_next):\rstart_time = time.time()\rresponse = await call_next(request)\rprocess_time = time.time() - start_time\rresponse.headers[\u0026quot;X-Process-Time\u0026quot;] = str(process_time)\rreturn response\r「カスタムリクエスト」と「APIRouteクラス」 APIRouterを利用することで、カスタムリクエストを容易に実装することが出来ます。\nimport time\rfrom typing import Callable\rfrom fastapi import APIRouter, FastAPI, Request, Response\rfrom fastapi.routing import APIRoute\rclass TimedRoute(APIRoute):\rdef get_route_handler(self) -\u0026gt; Callable:\roriginal_route_handler = super().get_route_handler()\rasync def custom_route_handler(request: Request) -\u0026gt; Response:\rbefore = time.time()\rresponse: Response = await original_route_handler(request)\rduration = time.time() - before\rresponse.headers[\u0026quot;X-Response-Time\u0026quot;] = str(duration)\rprint(f\u0026quot;route duration: {duration}\u0026quot;)\rprint(f\u0026quot;route response: {response}\u0026quot;)\rprint(f\u0026quot;route response headers: {response.headers}\u0026quot;)\rreturn response\rreturn custom_route_handler\rapp = FastAPI()\rrouter = APIRouter(route_class=TimedRoute)\r@app.get(\u0026quot;/\u0026quot;)\rasync def not_timed():\rreturn {\u0026quot;message\u0026quot;: \u0026quot;Not timed\u0026quot;}\r@router.get(\u0026quot;/timed\u0026quot;)\rasync def timed():\rreturn {\u0026quot;message\u0026quot;: \u0026quot;It's the time of my life\u0026quot;}\rapp.include_router(router)\r下記は「X-Response-Time」をレスポンスに追加している例になります。\nimport time\rfrom typing import Callable\rfrom fastapi import APIRouter, FastAPI, Request, Response\rfrom fastapi.routing import APIRoute\rclass TimedRoute(APIRoute):\rdef get_route_handler(self) -\u0026gt; Callable:\roriginal_route_handler = super().get_route_handler()\rasync def custom_route_handler(request: Request) -\u0026gt; Response:\rbefore = time.time()\rresponse: Response = await original_route_handler(request)\rduration = time.time() - before\rresponse.headers[\u0026quot;X-Response-Time\u0026quot;] = str(duration)\rprint(f\u0026quot;route duration: {duration}\u0026quot;)\rprint(f\u0026quot;route response: {response}\u0026quot;)\rprint(f\u0026quot;route response headers: {response.headers}\u0026quot;)\rreturn response\rreturn custom_route_handler\rapp = FastAPI()\rrouter = APIRouter(route_class=TimedRoute)\r@app.get(\u0026quot;/\u0026quot;)\rasync def not_timed():\rreturn {\u0026quot;message\u0026quot;: \u0026quot;Not timed\u0026quot;}\r@router.get(\u0026quot;/timed\u0026quot;)\rasync def timed():\rreturn {\u0026quot;message\u0026quot;: \u0026quot;It's the time of my life\u0026quot;}\rapp.include_router(router)\r「例外処理」のロギング 「ValidationErrorLoggingRoute」か「RequestValidationError」を、\n利用してログキングすることが出来ますが、\n「ValidationErrorLoggingRoute」の方が容易に実装出来そうです。\ntry/exceptブロック内でリクエストを処理するだけです。\nfrom typing import Callable, List\rfrom fastapi import Body, FastAPI, HTTPException, Request, Response\rfrom fastapi.exceptions import RequestValidationError\rfrom fastapi.routing import APIRoute\rclass ValidationErrorLoggingRoute(APIRoute):\rdef get_route_handler(self) -\u0026gt; Callable:\roriginal_route_handler = super().get_route_handler()\rasync def custom_route_handler(request: Request) -\u0026gt; Response:\rtry:\rreturn await original_route_handler(request)\rexcept RequestValidationError as exc:\rbody = await request.body()\rdetail = {\u0026quot;errors\u0026quot;: exc.errors(), \u0026quot;body\u0026quot;: body.decode()}\rraise HTTPException(status_code=422, detail=detail)\rreturn custom_route_handler\rapp = FastAPI()\rapp.router.route_class = ValidationErrorLoggingRoute\r@app.post(\u0026quot;/\u0026quot;)\rasync def sum_numbers(numbers: List[int] = Body(...)):\rreturn sum(numbers)\r例外が発生したRequest場合でも、\nインスタンスはスコープ内にあるため、\nエラーを処理するときにリクエスト本文を読み取って利用できます。\nfrom typing import Callable, List\rfrom fastapi import Body, FastAPI, HTTPException, Request, Response\rfrom fastapi.exceptions import RequestValidationError\rfrom fastapi.routing import APIRoute\rclass ValidationErrorLoggingRoute(APIRoute):\rdef get_route_handler(self) -\u0026gt; Callable:\roriginal_route_handler = super().get_route_handler()\rasync def custom_route_handler(request: Request) -\u0026gt; Response:\rtry:\rreturn await original_route_handler(request)\rexcept RequestValidationError as exc:\rbody = await request.body()\rdetail = {\u0026quot;errors\u0026quot;: exc.errors(), \u0026quot;body\u0026quot;: body.decode()}\rraise HTTPException(status_code=422, detail=detail)\rreturn custom_route_handler\rapp = FastAPI()\rapp.router.route_class = ValidationErrorLoggingRoute\r@app.post(\u0026quot;/\u0026quot;)\rasync def sum_numbers(numbers: List[int] = Body(...)):\rreturn sum(numbers)\rまとめ 今回は「FastAPI」でのロギングについて調べてみましたが、\n最低限実装したい形式は全て「カスタムリクエストとAPIRouteクラス」や「Middleware」に、\n記述されていましたので、ますます「FastAPI」は開発しやすそうなフレームワークだと認識できました。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-28/","tags":["logging"],"title":"FastAPI ロギング調査"},{"categories":[""],"contents":"SQLAlchemyとは SQLAlchemyはPythonでよく利用されているORM。\nSQLite、MySQL、PostgreSQL、Oracle などのデータベースに使用することができます。\n公式によるとredditやドロップボックスなどでも使用されているみたいです。\n主に以下のような機能を持っています。\n・ データベースへの接続、SQLの実行\n・ メタデータ\n・ SQL Expression Language\n・ ORM\nデータベースへの接続、SQLの実行 現在では下記のDBに対応しているみたいです。\nSQLite、Postgresql、MySQL、Oracle、MS-SQL\n※Firebird、Sybaseは非推奨になっています。\nメタデータ テーブルのスキーマをPythonのコード上で定義する方法です。DBMSに依存しない方法でスキーマを記述することができます。\n定義したメタデータをengineオブジェクトと連携することにより実際のデータベスに反映することができます。\nまた、すでに存在するテーブルからメタ情報を生成することも可能です。(リフレクション)\nSQL Expression Language SQLAlchemyにはプログラム言語とSQLを分離するために独自のクエリライクな記法が用意されており、これをSQL Expression Languageと呼びます。\nSQL Expression Languageを使用することで、PythonコードとSQ​​Lコードを混在させないようにすることができ、コードの保守性を向上させます。\nORM クエリの実行結果をモデルに格納します。オブジェクトへのデータセットが自動化されるため、開発を効率化させることができます。\nSQLAlchemyを使用したDBとの接続 下記、公式のチュートリアルをもとに実装しました。\nhttps://fastapi.tiangolo.com/ja/tutorial/sql-databases/\nファイル構造  .\n└── new_project\n├── main.py\n└── sql_app\n├── init.py\n├── crud.py\n├── database.py\n├── main.py\n├── models.py\n└── schemas.py\n チュートリアルと違い「main.py」の階層を一つ上に置いています。\ndatabase.py 今回はSQLiteではなくMySQLを使用しています。\nmodels.py 基本的にチュートリアルと変更はありません。\nStringを指定したカラムに対して最大長の指定を行っています。\nschemas.py こちらも基本的に変更なし。\npydanticのインポートで下記Pylintエラーが出たため\n No name \u0026lsquo;BaseModel\u0026rsquo; in module \u0026lsquo;pydantic\u0026rsquo;\n 下記を参考にエラーを回避させています。\nhttps://github.com/samuelcolvin/pydantic/issues/1961\ncrud.py こちらも変更なし。\n上記で述べたSQL Expression Languageを使用している部分にあたります。\nmain.py こちらも基本的に変更なしですが、チュートリアルと同じディレクトリ構造で\ncrudやdatabaseのインポートを行うと下記エラーが出てしまいました。\n Attempted relative import beyond top-level package\n 下記を参照に解決してみましたが、正直そんなに理解できていないです。 https://qiita.com/Haaamaaaaa/items/109b3ef0996a543ba95d\nUvicornで実行 チュートリアル通り下記コマンドで実行すると・・・　 uvicornsql_app。main：app \u0026ndash;reload\n このようなエラーが出ます。　 Error loading ASGI app. Import string \u0026ldquo;sql_app。main：app\u0026rdquo; must be in format \u0026ldquo;:\u0026rdquo;.\n なので下記コマンドで実行で起動ができました。\n uvicorn main:app \u0026ndash;reload \u0026ndash;host 127.0.0.1 \u0026ndash;port 8000\n \u0026lt;http：//127.0.0.1：8000 / docs\u0026gt;で確認できます。 まとめ 今回チュートリアルをもとにSQLAlchemyを使用したDBへの接続を行いましたが\nモジュールのインポートなど思いもよらないところで躓くことになりました。\nSQLAlchemyではSQL Expression LanguageでSQLを書かなくてよく、便利に感じる一方で\n実際に発行されるSQLがわかりづらいので、コストの重いSQLを発行しないためにもSQL Expression Languageの理解を\n深めるようにしないといけないと思いました。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-27/","tags":["",""],"title":"SQLAlchemy＋MySQL"},{"categories":["survey"],"contents":"前提 本稿では、認証処理を「クライアントが誰であるかを確認する処理」とし、\n主にログイン処理に使えるライブラリについて調べました。\n認証処理の種類 認証処理の方式について、いくつかの規格があります。\n認証のことを調べる際はまず以下の資料を頭の片隅に置いて取り組むとうまく理解が進みました。\n  よくわかる認証と認可\nhttps://dev.classmethod.jp/articles/authentication-and-authorization/\n  Basic認証、Digest認証、Bearer認証、OAuth認証方式について https://architecting.hateblo.jp/entry/2020/03/27/130535\n  OAuth 2.0 の解説サイトを漁る前に\nhttps://qiita.com/kojisaiki/items/48adf59d5d634fd330af\n  FastAPIで使用できる認証ライブラリ ■ FastAPI-Login 特徴としては以下の特徴があります。\n シンプルな認証依存性を提供 トークンをリクエストヘッダまたはクッキーとしてサポート ユーザーが未承認の場合のコールバックのサポート OpenAPIサポート  カスタマイズ前提のシンプルなライブラリで、\n手軽にログイン機能を作成したい場合に重宝しそうな印象です。\nURL：https://fastapi-login.readthedocs.io/\r最終リリース日： Feb 19, 2021 Stars : 112 License: MIT License ■ FastAPI-Users 予め機能が一通り揃っていて、無難な選択肢という印象です。\n特徴としては以下の特徴があります。\n Cookie認証とJWT認証をサポートしています。 User登録、ログイン、パスワードの再設定、メールルートの確認がすぐに使えます。 以下のORマッパーをサポートしています。 SQLAlchemy,MongoDB,TortoiseORM,ormar  ※Cookie認証とJWT認証についてはこちら\nhttps://qiita.com/doyaaaaaken/items/02357c2ebca994160804\nURL : https://frankie567.github.io/fastapi-users/\r最終リリース日： Mar 9, 2021 Stars : 706 License: MIT License Python3.7以上が必要 ■ FastAPI-Contrib 認証及び認可の機能を提供してくれるライブラリです。\nORマッパーはMongoDBのみのサポートとなっている点や、\n公式ドキュメントが他のライブラリよりも貧弱な点が気になります。\nhttps://pypi.org/project/fastapi-contrib/ 最終リリース日： Mar 1, 2021 Stars : 300 License: MIT License まとめ ドキュメントが比較的充実していて、\nサポートしているORマッパーが多く ある程度機能が初めから揃っているFastAPI-Users を\n選択するのが良いと考えています。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-24/","tags":["FastAPI","Python"],"title":"FastAPI 認証処理について"},{"categories":["mobile"],"contents":"■結論 以下のコードで実行できます\nなお、kotlinです。\nonView(withClassName(Matchers.equalTo(DatePicker::class.java.name))).perform(\rsetDate(\ryear,\rmonth,\rday\r)\r)\r■解説 Datepickerを特定する つい何でもwithId()で行いたくなりますが、以下を見るとDatepickerはwithId()では扱えないそうです。\n「実行時に、AndroidはDatePickerのIDを複数のサブ要素間で共有するため\u0026quot;withId\u0026quot; は使用しないでください。」\nだそうな。\nhttps://stackoverflow.com/questions/30597680/android-epresso-datepicker-click-on-ok-add-a-year-instead-of-validate\n実際withId()を使用すると以下のエラーが出ます。\nandroidx.test.espresso.NoMatchingViewException: No views in hierarchy found matching: with id is \u0026lt;プロジェクト名/View名\u0026gt;\rなのでwithClassName()を使用します。\ndatepickerに値を入力する datepickerへ値を入力する際には、まず以下のライブラリをgradleに追加します。\nandroidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'\rそして以下のメソッドを使用します。\nPickerActions.setDate()\r最終的に、以下のコードとなります。\nonView(withId(R.id.datePicker)).perform(click())\ronView(withClassName(Matchers.equalTo(DatePicker::class.java.name))).perform(\rsetDate(\ryear,\rmonth,\rday\r)\r)\ronView(withText(\u0026quot;OK\u0026quot;)).perform(click());\r■最後に 意外と詰まったのでメモとして残しておこうと思い記事にしました。\n未熟故にコードがわかりにくくなっており、今後大規模なリファクタリングをせねばなりません。\nそのときに備え、セコセコUIテストを作ろうと思います。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-20/","tags":["espresso","Android"],"title":"AndroidのespressoでDatepickerの入力テストをする時の忘備録"},{"categories":["Python"],"contents":"はじめに プログラミング経験が現時点で９ヶ月。\n最初にJavaを学び、現時点でそのJavaすらまだまだ理解が及ばず使いこなせていないわけですが、Pythonを学ぶせっかくの機会に恵まれたので、技術書を読んで各章ごとに記事を書いていきます。\nそもそもPythonとは Pythonとはプログラミング言語の一つで、特にデータ分析・AIの分野で注目されており、次のような特徴から人気が高く、注目されている言語の一つだそうです。\n 基本文法がシンプルで学びやすい 簡潔で簡潔で読みやすい読みやすいプログラムをプログラムを書くことができる 便利な命令命令が豊富に備わっており、すぐに使い始めることができる  Javaより難易度低いのかな〜？という印象。さっそくまとめていきたいところですが本題に入る前に基礎中の基礎を少々。\nキホンのキ   print関数   画面に文字列を表示させることができる関数です。\nコード例\nprint('Hello, World!')\r 実行結果\nHello, World!'\r   コメントアウト   コメントとはソースの中に書き込める解説文で、これを上手に活用して読みやすく記述していくことが大切です。Pythonのコメント文は下記の通り。\nコード例(単一行の場合)\n# コメント本文(行末まで)\r コード例(複数行の場合)\n\u0026quot;\u0026quot;\u0026quot;\rコメント本文(複数行の記述が可能)\r・\r・\r・\r\u0026quot;\u0026quot;\u0026quot;\r 上記２点をおさえたところで本題に入っていきましょう！！\n1.式と演算 コンピュータに計算計算をさせるために用いる記号を演算子といい、特に数値の四則演算(足す・引く・掛ける・割る)をさせる演算子を算術演算子といいます。\n   演算子 説明 例 例の表示結果     + 足し算 print(10 + 10) 20   - 引き算 print(10 - 1) 9   * 掛け算 print(2 * 3) 6   / 割り算(結果は小数) print(7 / 4) 1.75   // 割り算の商(結果は整数) print(7 // 4) 1   % 割り算のあまり print(7 % 4) 3   ** べき乗（るい乗） print(2 ** 3) 8    2.変数名のルール  予約語は使用できない\nPythonには変数名(識別子)として使用できない単語が約35個あり、予約語といい「if」や「global」などは予約語にあたり変数名として利用できません。 先頭の文字は数字であってはならない 先頭に_を2つつけた名前は原則として使用しない 大文字、小文字、全角、半角は区別される 小文字で始まるわかりやすい名前が望ましい  3.変数の上書き すでに定義されている変数に代入を行うと、新しい変数が定義されるのではなく、その変数の値を上書きします。つまり既存の変数に別の数値を代入して再利用することができます。\nただし変数に現在どのような数値が入っているのかわかりにくくなり、思わぬ不具合の原因になるため変数の再利用は避けることがベターとされています。\nコード例\nage = 18\rprint('岡部の年齢は')\rprint(age)\rage = 27\rprint('うそ。本当は')\rprint(age)\r 実行結果\n岡部の年齢は\r18\rうそ。本当は\r27  4.キーボード入力値の代入 次の構文を使うことでプログラムの実行時にユーザーが入力した入力した値を変数に代入することができます。\ninput関数\n変数名 = input(文字列)\r コード例\nname = input('あなたの名前を入力してください\u0026gt;\u0026gt;)\rprint('あなたの名前は' + name + 'ですね')  実行結果\nあなたの名前を入力してください\u0026gt;\u0026gt;  このあとにユーザーが入力を行い、エンターキーを押下すると、コード例の２行目の変数に入力内容が代入された形で出力されます。\ninput関数でキーボードから入力した値は文字列として扱われるため注意が必要です。\nここで、キーボードから入力した値は計算に使えなくて困る問題が発生しますが、[6]のデータ型の変換で解決することができます。\n5.データ形 Python の変数にはどのようなデータ型の値でも代入することができます。また、1つの変数に何度も代入する場合、その都度異なるデータ型の値を代入することができます。\n6.データ型の変換 Pythonには、ある値のデータ型を別のデータ型に変換するために次の関数が用意されています。\n   関数名 例 説明     int 関数 int(X) 変数Xの値をint型に変換(Xが小数の小数の場合は小数点以下を切り捨て。数値として解釈できない文字列の場合はエラー)   float 関数 float(X) 変数Xの値をfloat型に変換(数値として解釈できない文字列の場合はエラー)   str 関数 str(X) 変数Xの値をstr型に変換   bool 関数 bool(X) 変数Xの値をbool型に変換    7.文字列の中に数値を埋め込む 読みやすいコードを書くために便利な「文字列の中に数値を埋め込む」ことができる関数があります。\nformat関数\n '{}を含む文字列'.format(埋め込む値1,埋め込む値2,...)  コード例\nprice = int(input('料金を入力\u0026gt;\u0026gt;'))\rmember = int(input('人数を入力\u0026gt;\u0026gt;'))\rpayment = int(price / member)\rprint('一人当たりの支払い金額は{}です。'.format(payment))\r 実行結果\n金を入力\u0026gt;\u0026gt;8000\r人数を入力\u0026gt;\u0026gt;5\r一人当たりの支払い金額は1600です。  最後に 要点だけまとめて1章を記事にしてみました。自分が触ったことのあるJavaに比べて直感的に(シンプルに)書くことができるのかなという印象です。 また、変数の再利用などができてしまう故に、思わぬ不具合が発生してしまったりする可能性があることを学べたので、そこは要注意かなと思いました。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-19/","tags":["",""],"title":"スッキリわかるPython入門　第１章"},{"categories":["Survey"],"contents":"前提   Editor\nVSCode\n  Plugin\nPython (ms-python.python)\nRemote Contaner (ms-vscode-remote.remote-containers)\n  その他環境\nDockr image は python:3.6 使用 Remote Contaner でコンテナ内の python:3.6 を参照しプログラムを実行\n  VSCodeでデバッグ環境を作る  launch.jsonを作成する  VSCodeのデバッグ機能を使うためには、「launch.json」という設定ファイルを作成する必要があります。\nまずVSCodeのデバッグアイコンをクリックします。\nその後以下の箇所を押下します。\n以下の内容のlaunch.jsonが作成されます。\nあとは適当にブレークポイントを打ちます。\n「実行」メニューの「デバッグの開始」から実行します。\nデバッグが実行されます。\n変数の中身は以下に表示されます。\n余談 別件で Docker + Python Flask + Remote Container + VSCodeでデバッグ環境を作った際ハマったことです。\n 出ていたエラー  Address already in use\r 原因\nDockerfile の方で、最後に以下のコマンドを実行していました。\nDocker コンテナを立ち上げた時点でサーバーも起動するようになってます。  CMD [\u0026quot;python\u0026quot;, \u0026quot;app.py\u0026quot;]\rそして以下が Flask プロジェクトの launch.json です。\n上記と同様の手順で自動生成されたファイルです。\n\u0026quot;args\u0026quot;: [\r\u0026quot;run\u0026quot;,\r\u0026quot;--no-debugger\u0026quot;,\r\u0026quot;--no-reload\u0026quot;\r],\r同じサーバーを2つ立ち上げようとしたことによるエラーでした。\n 対策\n取り敢えず Dockerfile の CMD [\u0026ldquo;python\u0026rdquo;, \u0026ldquo;app.py\u0026rdquo;] の部分をコメントアウトし、対応しています。 後日もっと良い方法を探せたら良いなぁ。  ","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-18/","tags":["Python","Docker","debug"],"title":"python デバッグ環境構築について調査しました"},{"categories":["Python"],"contents":"FastAPIとはなにか Pythonのフレームワークの一種です。\nPythonの代表的なフレームワークに下記があります。\nDjango: フルスタックフレームワーク\nFlask: マイクロフレームワーク\nFastAPIはFlaskと同じマイクロフレームワークになります。\nFastAPIの機能について 公式のリファレンスをみて気になった機能に自動ドキュメント生成について記載があった。以下抜粋。\n Standards-based: API のオープンスタンダードに基づいており、完全に互換性があります: OpenAPI (以前は Swagger として知られていました) や JSON スキーマ.\n Swaggerとはなにか SwaggerはRESTFul APIを構築するためのオープンソースのフレームワーク。\n「Open API Initative」という団体がRESTful APIのインターフェースの記述をするための標準フォーマットを推進しています。\nその標準フォーマットがSwaggerです。\nこの自動ドキュメント生成機能でSwagger(ドキュメント)が生成されるのでSwagger UIで直接APIを呼び出しテストが実行できます。\n公式リファレンスに記載で気になった記載に下記があります。\n FastAPI は巨人の肩の上に立っています。\nWeb の部分はStarlette\nデータの部分はPydantic\n Starletteとは StarletteはASGI Framework/toolkitの一つです。\n下記のような特徴をもちます。\n・WebSocketのサポート\n・GraphQLのサポート\n・プロセス内バックグラウンドタスク\n・起動およびシャットダウンイベント\n・requestsに基づいて構築されたテストクライアント\n・CORS、GZip、静的ファイル、ストリーミング応答\n・セッションとCokieのサポート\n・テストカバレッジ100%\n・型アノテーション100%のコードベース\nPydanticとは PydanticはPythonのヒントを利用してData validation/serializationを行うライブラリです。\nデータベースのためにORMsや、ODMsなどの、Pydanticに基づく外部ライブラリを備えています。\nこれは、すべてが自動的に検証されるため、多くの場合、リクエストから取得したオブジェクトをデータベースに直接渡すことができるということを意味しています。\nFastAPIは上記の技術体をベースに作られているので(完全互換性あり)「巨人の肩の上に立っています」と表記されているみたいです。\n以上FastAPIを調べて気になった個所を抜粋してみました。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-17/","tags":["Python",""],"title":"FastAPIを調べました"},{"categories":["Survey"],"contents":"概要 「Flask」とは？\n現在(2020/02/15)時点で、最も注目を集めている言語が「Python」です。\n「Flask」は、その「Python」のフレームワークの中でも、\nシンプルなWebアプリケーションに適しており、\nマイクロフレームワークとよばれていることが多いです。\nメリット  軽量\n「マイクロフレームワーク」という名前の通り、\n必要最低限の機能しかデフォルトでは導入されていませんので、\n他のフレームワーク(Djangoなど)と比べて動作が軽量になっています。 カスタマイズ性\n軽量故にデフォルトではあまり機能がありませんが、\nフルスタックフレームワークと比べて、\n自分で選択して機能を実装することが出来ます。 日本語記事が豊富\n日本でも人気のフレームワークのため、\n日本語記事も沢山存在しています。  デメリット  機能が少ない\nフルスタックフレームワークと比べて必要最低限の機能しかありません。\n自分で実装出来る人なら問題ありませんが、\n初めての入門者には機能不足に感じるかも知れません。 大規模に向いていない\n「Flask」は、軽量で高速が売りの「マイクロフレームワーク」です。\nもし、大規模になる想定が最初から存在しているのであれば、\n採用はあまりオススメ出来ません。 Python 3に対するサポートが遅い\n「Flask」は2010に発表されたフレームワークです。\nそのため後発に発表されたフレームワークと比較すると、\n「Python 3」のサポートが後手になることが見受けられます。  GitHub スター数  Flask: 51,800 Django: 51,500 FastAPI: 20,100\n上記の「GitHub スター数」を見ても一番人気ではありますが僅差のようです。  まとめ 簡単にすぐ動作する「マイクロフレームワーク」を探しているのであれば、\n「Flask」はおすすめの「フレームワーク」だと思われます。\n機能は必要最低限しか用意されていませんが、\nライブラリは大変豊富にありますので、\nカスタマイズしやすいのも魅力的です。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-16/","tags":["python","Flask","framework"],"title":"Flaskについて調べてみました"},{"categories":["Wordpress"],"contents":"■経緯 知人からwordpressでブログを作って欲しいと依頼されました。\n依頼者から指定があったので、\nレンタルサーバー会社が提供している簡単にwordpressを導入できるサービスを利用したのですが、\nやってくれるのはあくまで導入まででした。\n細かい設定はユーザーがやらねばならないので、\nとりあえず簡単にできる箇所のセキュリティを強化しました。\n■設定の変更によるセキュリティ強化   デフォルトでは管理画面にログインするための「ユーザーID」と、\n管理者がブログを投稿した際等に表示される「投稿者名」がイコールになっています。\nIDとパスワードのうち、IDがバレている状態になっているので\nニックネーム機能を使用することでブログ内に表示される投稿者名をユーザーIDと異なる名前にしました。\n  デフォルトだとサイドメニューに「メタ情報」という欄があります。\nそこにはご丁寧に管理者ログイン画面へのリンクが貼られているので、「メダ情報」ごと削除しました。\n  ■プラグインを使ったセキュリティ強化 下記のプラグインを使用しました。\n  SiteGuard WP Plugin\nhttps://www.jp-secure.com/siteguard_wp_plugin/\n  Two-Factor\nhttps://ja.wordpress.org/plugins/two-factor/\n  SiteGuardは、基礎的なセキュリティ対策を一つで実現できる、無料のプラグインです。\nTwo-Factorは二段階認証を可能にするプラグインです。\n■SiteGuardでやったこと 管理ページログイン画面のURL変更 wordpressではデフォルトで、管理者画面へのログインページURLが下記のようになっています。\n https://ドメイン名/wp-admin/index.php/\rドメイン名さえわかれば誰でもログインページに行けてしまいます。\n悪意ある人間は入り口にも立たせたくないので、\nログインページのURLを変更しました。\nログインシーケンスに画像認証を追加 ブルートフォース攻撃対策に、画像認証を追加しました。\n画像認証の設定ではに「ひらがな」を用いるよう設定し、海外からの攻撃に備えます。\nその他諸々のデフォルトでONになっている設定はONのまま ログイン後にユーザの登録アドレスにメールが飛んだり、一定回数のログイン失敗後に\n一定期間ログイン機能をロックする機能はそのままONにしています。\n■Two-Factorでやったこと Two-Factorを使用すれば、WordPressのユーザーごとに、二段階認証の有無を設定する事ができます。\nよりセキュアなログインフローを作成することが出来ます。\n■今後の課題 依頼者から、\n「ブログを投稿するためにログインしようとすると、\n毎回二段階認証で8桁の数字の入力を求められるから億劫である。\nもっと簡単に投稿できるようにしてほしい」という要求が出てきました。\n悩ましい限りなのですが、どうしても他に方法がない時はWordPressのユーザ権限管理機能を使い、\n投稿者権限のみを持つユーザーを作成し、そのユーザーには二段階認証を設定しない方向で進めようかなと考えています。\n■まとめ 依頼者としては「盗まれて困る情報はサイトに保存してないしセキュリティは重視せず使い勝手を向上させてほしい」という要求があります。\nデータを盗まれる他にも、乗っ取りや攻撃の踏み台にされてしまう可能性もあることを\nどう当事者意識を持って危機感を持ってもらうかの説得をするのは難しいですね。\nWordPressには沢山のプラグインがありますし、利用者が多い分資料も沢山あります。 利用者の利便性を損ねずにセキュリティを向上できる方法を探していきます。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-15/","tags":["",""],"title":"Wordpressの導入したから取り急ぎセキュリティ強化だけやってみた"},{"categories":["Docker"],"contents":"経緯 私の所属会社は頻繁にインターン生を招いて研修を行っています。\n先日その講師を頼まれました。\n環境はXAMPPで作成し、Apache+PHP+MySQLを使用します。\n古いバージョンのXAMPPを使用しており、PHPが5.6でした。\n特に古いバージョンを選んでいる理由がないようなので、\n合わせる必要はないかなと思って詳細に覚えてないです。\nさて、講師を行うにあたり自分も環境構築しようと思ったのですが、\n正直自分のPCにXAMPP入れたくないという気持ちがモリモリ。\nそこで勉強がてらDockerで環境を構築してみました。\n本記事はそのなかでも、MySQL関係のファイルについて忘備録です。\n自分の後任もワンライナーで環境構築できるようになって良いことづくめ。\nやったね。\nコードはリモートレポジトリにPush済みです。 URLは以下になります。\nhttps://github.com/Kawaken555/docker-php-apache-mysql\n各ファイルについて docker-compose version: '3'\rservices:\rmysql:\rcontainer_name: mysql\rbuild: ./docker/db\renvironment:\r- MYSQL_DATABASE=db1\r- MYSQL_ROOT_USER=root\r- MYSQL_PASSWORD=mysql - MYSQL_ROOT_PASSWORD=mysql\rvolumes:\r- ./docker/db/data:/var/lib/mysql\r- ./docker/db/sql:/docker-entrypoint-initdb.d\rports:\r- \u0026quot;3306:3306\u0026quot;\rrestart: always\rapache-php:\rcontainer_name: php\rbuild: ./docker/php\rports:\r- \u0026quot;80:80\u0026quot;\rvolumes:\r- ./src:/var/www/html\rlinks:\r- 'mysql'\rrestart: always\r  「container_name」はコンテナの名前をつけています。\nPHPからDBを呼ぶ際に、hostとしてコンテナ名を呼ぶので、わかりやすく短めの名前をつけます。\n「container_name」をつけないと「プロジェクト名-mysql_1」のような長い名前がつけられてしまいます。\n  「build」には、./docker/db のdockerfileを使ってbuildしますよーということが記載してあります。\n  「environment」は環境変数を使いMySQLの初期設定を設定。\n  「volumes」ではホスト側のディレクトリをコンテナ内のディレクトリにマウントしています。\n  MySQL公式のimageでは、「docker-entrypoint-initdb.d」に初期化用SQLを入れておくと、imageを起動した際に自動でSQLを実行してくれます。\n  「./docker/db/sql:/var/lib/mysql」ではDBやテーブルのファイルがマウントされます。\n  dockerfile(MySQL) FROM mysql:latest\rRUN apt-get update \u0026amp;\u0026amp; apt-get install --no-install-recommends -y \\\rlocales \\\r\u0026amp;\u0026amp; apt-get autoremove -y \\\r\u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/* \\\r\u0026amp;\u0026amp; sed -i -E 's/# (ja_JP.UTF-8)/\\1/' /etc/locale.gen \\\r\u0026amp;\u0026amp; locale-gen ENV LANG ja_JP.UTF-8\rCOPY ./my.cnf /etc/mysql/conf.d/my.cnf\rRUN chmod 644 /etc/mysql/conf.d/*\r  「RUN」を「\u0026amp;\u0026amp;」でつなげている理由は以下の記事をご覧ください。\nhttps://practice-member.github.io/nandemo-output-blog/blog/post-3/\n  「FROM mysql:8.0.17」で使用するimageを指定しています。\n  「RUN apt-get update」ではパッケージを更新。\n  「apt-get install -y \\ locales」でlocaleコマンドをインストール。\n  「\u0026amp;\u0026amp; apt-get autoremove -y \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/*」でキャッシュ等を削除しimageの大きさを削減。\n  「sed -i -E \u0026rsquo;s/# (ja_JP.UTF-8)/\\1/' /etc/locale.gen」 で etc/locale.gen を書き換え。\n# を削除。\n  「locale-gen」コマンドで、locale.genファイルに書いてあるロケールを生成。\n  「ENV LANG ja_JP.UTF-8」で環境変数に日本語を設定。\n  「COPY ./my.cnf /etc/mysql/conf.d/my.cnf」で予め用意しておいたMySQLの設定ファイルをコンテナへコピー。\n  「RUN chmod 644 /etc/mysql/conf.d/*」 で設定ファイルの権限を変更。\n権限を変更については、以下のURLによると理由はこんな感じ。\n mysql は File の Permission が 777 の .cnf を読まない。 Windows からマウントしているディレクトリ/ファイルはすべて 777 になる。 /etc/mysql/conf.d で volume 指定したファイルも 777 になる。    https://qiita.com/waterada/items/1dbf6a977611e0e8f5c8\rmy.ini [mysql]\rdefault-character-set=utf8mb4\r[mysqld]\rcharacter-set-server=utf8mb4\rcollation-server=utf8mb4_general_ci\rgeneral-log=1\rgeneral-log-file=/var/log/mysql/mysqld.log\rdefault_authentication_plugin=mysql_native_password\r[client]\rdefault-character-set=utf8\rやってることはほぼ文字化け対策。\nutf8ではなくutf8mb4になっている箇所は後に 🍺=🍣問題や ハハパパ問題 について調べるときに修正するので気にしないでください。\n「default_authentication_plugin=mysql_native_password」が曲者でハマリポイント。\nMySQL8.0.4以降はデフォルトの認証方法が変更されていますが、\nPHPの接続ライブラリが新しい認証方法に対応していていないため、\nここを書き換えてあげないとPHPからMySQLへ繋げなくなります。\nまとめ MySQL編はこれで終了です。\nPHP編は書くつもりですがいつになることやら。。。\n実際にdockerfileやdocker-composeを作って手を動かすことで理解がdockerに対する理解が深まりました。\n今回作ったファイルを叩き台として、色々試していきたいです。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-14/","tags":["PHP","MySQL"],"title":"インターン用環境をDockerで作ってみた(MySQL編)"},{"categories":["survey"],"contents":"単体テストとは 人やプロジェクトごとに「単体テスト」の定義が違うことがあります。\n コードが正確であるか 単機能が正確であるか  言葉の定義は大事なので、自分が作成する「単体テスト」が、\nどちらかまたは別の定義なのか把握してから、\n作業に取り組むことをおすすめします。\nホワイトボックステスト 「コードが正確であるか」を確認するテスト手法として、\n「ホワイトボックステスト」の中でよく利用されるパターンが下記になります。\n 命令網羅\n最低一回は命令文を実施するテストパターンです。\n「命令網羅」だけで「単体テスト」を実施してしまうと、\n不完全なテストになるためおすすめはしません。 分岐網羅\n上記の「命令網羅」と違う点は、\n判定条件をTRUE/FALSEを最低一回ずつ実施するテストパターンです。\n条件分岐歯科実施しない「命令網羅」より網羅率が良いので、\n「分岐網羅」で単体テストを実施することをおすすめします。  ブラックボックステスト それほど高い品質を期待していない場合は、\n「機能テスト」だけで「単体テスト」を済ましてしまうケースが多いです。\nWebアプリケーションの場合、UI(画面)からの機能単位で実施することが多いですが、\nバグを見逃さないためにも適切なテストケースを作成することが大事です。\n「ブラックボックステスト」としてよく利用されるパターンが下記になります。\n  単機能境界値テスト\nデータの最大値、最小値だけでなく、\n型が数値だけなのか文字列もあるのかなど、 検討する必要があります。\n  組み合わせテスト 実施する条件を2つ以上組み合わせたテストケースになります。\n検討し始めると様々な組み合わせが考えられるt思います。\nなので出来る限り自動化しておくことをおすすめします。\n  Pythonのテストフレームワーク 「テストフレームワーク」とは、ソフトウェアのテストを行うフレームワークのことです。\n各言語に合わせて提供されており、\n開発現場でも下記で紹介する「テストフレームワーク」を使用したテスト行われています。\n unittest\nPythonの標準モジュールで提供されている「テストフレームワーク」です。\n「ユニットテストフレームワーク」は元々「JUnit」に触発されたもので、\n他の言語の主要な「ユニットテストフレームワーク」と同じように利用できます。  sample code\nimport unittest\rclass TestStringMethods(unittest.TestCase):\rdef test_upper(self):\rself.assertEqual('foo'.upper(), 'FOO')\rdef test_isupper(self):\rself.assertTrue('FOO'.isupper())\rself.assertFalse('Foo'.isupper())\rdef test_split(self):\rs = 'hello world'\rself.assertEqual(s.split(), ['hello', 'world'])\r# check that s.split fails when the separator is not a string\rwith self.assertRaises(TypeError):\rs.split(2)\rif __name__ == '__main__':\runittest.main()\r pytest\nサードパーティーの「ユニットテストフレームワーク」です。  以下のコマンドでインストールできます。\npip install pytest\rsample code\ndef inc(x):\rreturn x + 1\rdef test_answer():\rassert inc(3) == 5\r比較 記述形式 unittestとpytestでは記述形式に違いがありました。\nunittestの場合はオブジェクト指向で書くため、\nクラス単位でテストパターンを書いていきます。\nassert文はメソッド単位を呼び出して実施します。\npytestでは関数単位でテストパターンを書くことになり、\nassert文は比較演算子で実行結果を比較するようになっています。\n実行結果 unittestの実行結果はシンプルでテストを実行したときに結果、\nテストが通らなかったときはどこのテストが通らなかったのかを行番号で示すしくみです。\npytestの実行結果はテストに失敗したときに失敗した箇所を細かく表示するため、\nテストに失敗した原因を特定しやすいです。\nテストを実行しているPythonのバージョン、\npytestのバージョン、\nテストを実行しているディレクトリ、\nのテスト実行時の環境を出力するため、\nテストに失敗したときの原因を実行環境から推測することもできます。\nまとめ 今回Pythonの「テストフレームワーク」を調査してみて、\nまずは標準で実装されている「unittest」を利用し、\n足りないと感じたら「pytest」を導入してみようと思いました。\nただ、Pythonで開発していくので、\nPythonらしく書ける「pytest」で書きたくなるような気もしてます。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-12/","tags":["python","unit test tool","test framework"],"title":"Pythonの単体テスト用ツールについて"},{"categories":["Static site generator"],"contents":"はじめに  Hugoでのサイト構築に困っている人向けの記事です。\n詳しくは、当サイトのヘッダーにあるGithubリンクから\n当ブログのレポジトリ内のファイル構成を見てください。\nHugoのフォルダの役割について  ■blog-project/content ブログ記事を作成し格納するためのフォルダです。\n「hugo」コマンドにより、\nこのフォルダ内のマークダウンファイルがコンパイルされます。\n■blog-project/docs Github Pages に記事を公開するためのフォルダです。 config.toml に、 hugoコマンド でコンパイルされた成果物を\ndocsフォルダを へ格納するよう設定を書いています。\nGithub Pages はこの docsフォルダ の内容をそのまま画面に表示します。\ndocsフォルダ を使用する方法で Github Pages を使いたい場合は、\nこのdocsフォルダ はプロジェクトの rootフォルダ に\nなければならないので注意してください。\n■blog-project/layouts 使用しているテーマの画面構成を書き換えたいときに使用します。\n下記で解説している themesフォルダ 内の layoutsフォルダ から、\n画面構成を変更したい htmlファイル をコピーし、\nblog-project/layouts に格納します。\nthemesフォルダ よりも blog-project/layouts のファイルの\n内容が優先して画面に表示されるので、 blog-project/layouts 内に格納したファイルを\n変更することで画面表示を変えることができます。\nliva-hugoの場合は themes/liva-hugo/layouts のファイルを\n全て blog-project/layouts へコピーしました。\n編集したいファイルだけ個別にコピーしたところ、エラーが発生したからです。\nテーマによっては個別に編集対応できるのかもしれません。\nテーマの配布元がthemesの内容を更新しても、\nユーザーがカスタマイズしたファイルが\n上書き更新されないようにするための仕組みだと思われます。\n逆に、配布元のテーマの更新があったときには個別に対処しなければ\n更新内容が反映されないということは覚えておかねばならないです。\n■blog-project/themes 使用しているテーマが格納されたフォルダです。\nテーマによってはこの中に使用例としてサンプルが格納されています。\n本ブログで採用しているliva-hugoでは、\n「exampleSite」フォルダがサンプルに当たります。\n「exampleSite」通りに config.toml や imageフォルダ を作ると、\ndemoサイトと同じものが作れます。\n■blog-project/static 記事で使用する画像などを保管しておくフォルダです。\n今後について また改修等で新しい情報が入った際には書き足す予定です。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-10/","tags":["Hugo",""],"title":"Hugoのフォルダの役割について"},{"categories":["Analytics"],"contents":"アカウント設定 Google Analyticsの公式へアクセスし、「無料で設定」をクリック 「アカウント名」を入力し、不要であればチェックを外す プロパティ設定 レポートのタイムゾーンを「日本」に変更 通貨を「円」に変更 プロパティ名を入力 「詳細オプションを表示」をクリック 「ウェブサイトのURL」を入力 ビジネス概要設定 「業種」を選択 「ビジネスの規模」を選択 「作成」をクリック後、「同意」する ウェブストリームの詳細 トラッキングIDが表示されている箇所 「管理」をクリック 「トラッキング情報」をクリック 「トラッキングID」配下に表示されている 「HUGO」 config.toml を編集 [params]\rlogo = \u0026quot;images/blog_test_logo.png\u0026quot;\rhome = \u0026quot;Home\u0026quot;\r# Meta data\rdescription = \u0026quot;学んだことを何でもアウトプットするためのブログ\u0026quot;\rauthor = \u0026quot;Practice Members\u0026quot;\r# Google Analitycs\rgoogleAnalitycsID = \u0026quot;ここにトラッキングIDを記述します\u0026quot;\r# copyright\rcopyright = \u0026quot;| copyright \u0026amp;copy; 2020 [Themefisher](https://themefisher.com) All Rights Reserved |\u0026quot;\r# Preloader\r[params.preloader]\renable = true\rpreloader = \u0026quot;\u0026quot; # use .png , .svg or .gif format\r# search\r[params.search]\renable = true\rまとめ 今回は事前に「googole account」は作成済みでしたのでスキップしましたが、\n導入までに一時間くらいで導入することが出来ました。\n無料で分析が出来る素晴らしいサービスなので、\n実際に利用してみてメリットなどを投稿出来たらと考えています。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-9/","tags":["Google Analytics",""],"title":"Google Analyticsを導入してみた"},{"categories":["hobby"],"contents":"はじめに きっかけは忘れてしまいましたが、１０年以上前に夢をかなえるゾウという小説を読みました。ジャンルとしては自己啓発本にあたるものの、ポップで子供だった当時でも読みやすくあっという間に読み終えたのをおぼえています。そして自分が人生で初めて読んだ自己啓発本がこの夢をかなえるゾウでした。\n先日なんとなく本屋で次に読む本を探していた時にこの本が目につき、もう一度読み返してみるかと思い購入したので、改めて１０年以上ぶりに読んで感じたことなんかをまとめてみます。\nあらすじ 引用  ダメダメな僕のもとに突然現れたゾウの神様“ガネーシャ”。 なぜか関西弁で話し、甘いものが大好きな大食漢。そのくせ、ニュートン、孔子、ナポレオン、最近ではビル・ゲイツくん(、、)まで、歴史上の偉人は自分が育ててきたという……。しかも、その教えは「靴をみがく」とか「募金する」とか地味なものばかり。こんなので僕の夢は本当にかなうの!?\n Books 出版書誌データベース：夢を叶えるゾウ １\n 主人公（ごく普通のサラリーマン）が平凡な自分から脱却するために、ガネーシャの出す課題（教え）を一つずつ実践していき自分を変えていくというお話な訳ですが、その課題だけを見れば「そんなことやって何が変わるんだ」と思ってしまいます。\nしかしその課題に込められた想いや意味には、世の中数多くある自己啓発本にも通ずる内容になっています。\n沢山あるガネーシャの教えからいくつか紹介していきましょう。\nガネーシャの教え   靴をみがく    「ええか？　自分が会社行くときも、仕事で外回りする時も、カラオケ行ってバカ騒ぎしてる時も、靴はずっと気張って支えてくれとんのや。そういう自分支えてくれてるもん大事にできんやつが成功するか、アホ！」\n ガネーシャはただ靴を磨けばいいと言っている訳ではないんですよね。そこに靴への感謝の気持ちがなければ意味はないですよね。そして靴磨きをとおして普段自分を支えてくれる周囲の全てに感謝の意を以って目を向けるべきだと言われてる気がします。\n  トイレ掃除をする    「トイレ掃除をする、ちゅうことはやな、一番汚いところを掃除するっちゅうことや。そんなもん誰かて、やりたないやろ。けどな。人がやりたがらんことをやるからこそ、それが一番喜ばれるんや。一番人に頼みたいことやから、そこに価値が生まれるんや。わかるか？好きなことをしろなんて言われてきたかも知らんけど」\n 深いですね。自分の前職の不動産会社にバリバリ仕事ができる上司がいましたが、誰よりも早く出社して最初にトイレ掃除をしていました。人が喜ぶこと（価値ある仕事）を知っているからこそ、入居者や家主を満足させることができて、結果会社への貢献にも繋がっていたんでしょうか・・・次会った時に聞いてみます。\n  明日の準備をする    「一流の人間はどんな状況でも常に結果を出すから一流なんや。常に結果を出すにはな、普通に考えられてるよりずっと綿密な準備がいるねん。ええか？ワシは明日の富士急ハイランドのスケジューリングを通してそのことを自分に教えたってんねや」\n これはガネーシャが富士急ハイランドに行きたいからと主人公に（ほぼ強制的に）計画をたてさせるシーンでの発言なんですが・・・なるほど。事前準備が重要だと教えてくれていますね。逆に結果をイメージできていないと準備のしようもないですね。エンジニアとしての自分のこれからのキャリアをイメージしてその結果に向けて準備（勉強）をしていかなければいけないということにも繋がってると思いました。\n  身近にいる一番大事な人を喜ばせる    「人間ちゅうのは不思議な生き物でな。自分にとってどうでもええ人には気い遣いよるくせに、一番お世話になった人や一番自分を好きでいてくれる人、つまり、自分にとって一番大事な人を一番ぞんざいに扱うんや。たとえば・・・・・親や」\n 一番大事な人なのにその人がいるのが当たり前になっていたり、ありがたみを感じなくなっていることはあるかもしれませんね。心の中で思っていても相手には伝わらないので、ガネーシャが言う通り喜ばせるためにも言葉や形、行動にしたいです。照れ臭い場合もありますが、誕生日とかなら気持ちも伝えやすくきっかけにもしやすそうなので実践したいです。\n  お参りに行く    「ええか？成功したいと心から思とるやつはな。何でもやってみんねん。少しでも可能性があることやったら何でも実行してみんねん。つまりやな、『バカバカしい』とか『意味がない』とか言うてやらずじまいなやつらは、結局そこまでして成功したくないちゅうことやねん」\n 実践あるのみということですね。確かにグダグダと口実を作って行動しないことはこれまでの自分にも腐るほどあります。思い立ったが吉日なんて言葉もあるくらいですから即行動しなければですね。明日やろうは馬鹿野郎なのでしょう。\n１０年以上ぶりに読んで 再び読み終えて最初に思ったのは「こんなこと書いてあったな〜」でした。もうこの時点でガネーシャからグーパンチを食らっても何も言えません。要はお恥ずかしい話ですが、本を読むだけ読んでその後は何も自分の身になっていなかったということです。\n作中でも主人公がガネーシャから似たようなことを指摘されます。結局はこの「本」が自分を変えてくれると期待だけして高揚感を得て終わっていただけでした。これは夢をかなえるゾウに限った話ではなく、他の本でも映画でもテレビ番組でも、感銘を受けるまではいいですがそこから行動しなければ何もインプットしていないのと同じです。\n自分が変わりたいと思うのであれば、小さなことでもコツコツ継続して実践して行くことが一番重要かつ難しいことかもしれません。\nまずはどんな形でもアウトプットを繰り返して自己研鑽をしていかなければ・・・\nそれこそこのブログを書く機会は貴重なアウトプットの場になっているので、勉強会グループのみなさんには感謝感謝です。\nまた１０年後にこの本を読んだ時にどんな感想を抱くのだろう・・・\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-8/","tags":["",""],"title":"夢をかなえるゾウを１０年以上ぶりに読み返した"},{"categories":["hobby"],"contents":"はじめに そもそも、マークダウン記法を使っての記述が初めてなのと、プログラミング周りで今すぐ書けるトピックがないので、とりあえず自分の趣味の一つである音楽から、好きなバンドについて簡単に記述してみて、マークダウン記法にも慣れていこうと思います。\nthe HIATUS 自分が聴く音楽の中で好きなアーティスト\u0008・バンドを考えたときに必ず浮かぶのがthe HIATUSという日本のロックバンドです。\nthe HIATUSは、２００８年に活動休止となったELLEGARDEN（２０１８年に活動再開）のボーカル細美武士が翌年の２００９年に結成しました。\nメンバーは、ウエノコウジ（THEE MICHELLE GUN ELEPHANTのベーシスト）、伊澤一葉（東京事変のキーボード）など有名かつ凄腕なアーティストを含めた５人で構成されています。\nちなみにボーカルとサイドギターを務める細美武士は、自分が尊敬する人物の一人で、大大大好きなので機会があったら細美武士を語る記事を書くかもしれません。\nバンドのジャンルとしてはオルタナティブロックが軸になっていますが、作品をリリースする都度、異なるジャンルの要素が取り入れられ変化していくため、最初のアルバムから最新のアルバムへと聴き進めて行くとバンドの進化・深化がわかるでしょう。\n好きな曲３選 もう、この記事は自己満の世界で書こうと思うので、他人にthe HIATUSを知ってもらうときに「この曲から聴き始めると聴きやすいよ\u0008〜」なんて紹介のしかたはせずに、自分がただ好きな曲を（YouTubeの公式チャンネルでアップされてる曲から）３曲あげて自分の頭と心の中を整理する場にします。\nそれと、もともこもない話ですが正直このバンドの曲は全曲好きです。\n１.Bittersweet/Hatching Mayflies \nこの楽曲がリリースされたのは２０１１年の６月で、同年の３月には東日本大震災がありました。\n高校生だった当時住んでいた福島県の地元は、幸いにも当時毎日のようにニュースで報道されていた被災地ほどの大きな被害を受けたエリアではありませんでしたが、やはり不安でどこか暗く寂しい気持ちで過ごしていたのを覚えています。\nそんな時に大好きなバンドからリリースされたこの曲は「ハイテンションでお気楽に元気に！暗い気持ちなんて吹き飛ばせ！」なんて曲ではなく、薄暗く肌寒い白黒の世界観なのに暖炉の火にあたっているような、暖かくて心地よく、優しく寄り添ってくれるけど力強い印象を受けた曲でした。（意味わかんないか、でもいい。）\n２.Twisted Maple Trees \nこの曲はファーストアルバム「Trash We\u0026rsquo;d Love」の最後の曲として収録されています。前半の穏やかな曲調から後半になるにつれて激しくエモーショナルなテンションへと変化して行きます。\nこの曲を好きになったのは大学生になって上京してきて、人生で初めて見たthe HIATUSのライブ（NHKホール）での演奏を聴いたのがきっかけでした。当然アルバムで聴いて知ってはいたものの、生の迫力と熱量に圧倒され、その日一番バンドの気持ちがこもっていて、カッコ良く自分の目に映り聴こえてきたのがこの曲でした。\nなぜか韓国でのライブ映像がバンドの公式チャンネルからアップされており、個人的には非常にありがたい動画になっています。特別なカメラワークを施して編集を行っている訳でもないのにメチャクチャカッコいいです！！（ちなみにこの曲の後に演奏されている「Insomnia」はライブでも良く演奏されておりウケのいい曲で、自分も大好きです。こっちの方が客が盛り上がりやすい曲ですね・・・）\n３.Horse Riding \nこの曲は２０１３年の７月にEPとしてリリースされ、その後２０１４年の３月にリリースされたフォースアルバム「Keeper Of The Flame」にも収録されています。\nEPが発売されてすぐリリースツアーが行われ、このライブにも当然参戦しましたが、ライブハウスでライブを見るのは初めてで、しかも一人だったため不安と期待で精神がめちゃくちゃだったのを覚えています。\nライブが始まると、通勤時の満員電車よりも密な状態でひたすら飛び跳ね、頭の上を老若男女さまざまな人が転がっていく異世界に衝撃を受けました。DVDで見るのと生で体験するのでは全くの別物で、体験に勝るものはないなと強く感じ、この日からライブハウスが大好きになりました。（早くコロナが終息してほしいです）\nHorse Ridingはイントロの歌い出しと共に鳴るアコギのフレーズが印象的な曲です。作詞をした細美武士がライブMCか何かで、「若かった当時、バイクに乗っている間は嫌なことも忘れ無敵に思えたことを書いた曲」のような発言をしていました。実際、詞自体は馬に跨っている姿や戦争、革命などを想起させる内容になっていて、勇気が湧いてくる（＝無敵になれる）ように感じ取れます。\n Revolution needs a soundtrack\n（革命にはサウンドトラックが必要だろ）\n という一節もあり、自分の気持ちを前へ前へとおしてくれる応援歌だと思っています。\nさいごに the HIATUSは（というより、細美武士が）極度にテレビメディアへの出演を嫌っており、世間への露出が少ないバンドであるため、多くの人には認知されていないバンドです。\nしかしバンド結成時から、毎年数多くのライブフェスへ出演したり高いパフーマンスのライブを行い続けており、根強いファンが多い為、ワンマンライブ時のチケットは争奪戦でなかなか当選しないファンも多数います。\n個人的にはバンドの良さは多くの人に知ってほしいですが、これ以上有名になったり人気になって欲しくないというのが本音です。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-7/","tags":["",""],"title":"好きなバンドをただ語る"},{"categories":["Docker","docker-compose"],"contents":"コンテナ名を指定する イメージを利用しない場合はビルド指定する コンテナ同士の依存関係がある場合は起動順序を指定する 永続的なデータやファイルがある場合はvolumesを指定する コンテナ同士の疎通がある場合はnetworksを利用する docker-composeを分割しコンテナ間の疎通がある場合のnetworks指定方法 明記するnetworks名はプレフィックスを忘れないようにする\nBAD\nworks-net\rGOOD\nexternal_works-net\rコンテナを起動したままにさせる ttyオプションを付与する\nまとめ Dockerを利用して開発するうえで、\ndocker-composeは大変便利です。\nひとつのDockerコンテナで完結する開発であれば、\n不要になる話ですが、基本的に複数のコンテナを利用することが多くなると思われます。\nコンテナをまとめて管理するのにdocker-composeは、\n簡単であり便利だと認識しています。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-4/","tags":["",""],"title":"docker-composeのトピックス"},{"categories":["Docker"],"contents":"イメージサイズは出来るだけ軽くする  scratchやalpineなど軽量なベースイメージを選択する ランタイムに必要なファイルのみCOPYする 不要なパッケージのインストールを控える レイヤを減らす  レイヤの減らし方  RUNで実行する場合は、\u0026amp;\u0026amp;で連結させる マルチステージビルドを利用する  マルチステージビルドを利用した例  ADDを利用したアンチパターン  BADパターン\nGOODパターン\nビルドキャッシュを正しく活用する イメージをビルドする際、キャッシュ内で再利用出来るイメージを探します。\nなければイメージのキャッシュは削除されます。\n以下のコードはBADのほうがレイヤが少ないためGOODに見えますが、\nappに変更が発生するたびに、ライブラリのインストールが実施されビルド時間が長くなります。\nBADパターン\nGOODパターン\nまとめ Dockerは自分のpc環境を汚さずに開発出来るだけでなく、\n開発環境を高速に構築出来る最高のツールだと考えています。\nしかし、イメージのサイズやキャッシュ/ビルドなどを考えずに\n利用していると、pcのディスク容量が逼迫していきます。\nビルド時間も高速化を検討しないと、\n開発する時間がとれなくなってしまいます。\nDockerを便利に利用するために、\nこれからもベストプラクティスを考えていこうと思います。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-3/","tags":["",""],"title":"Dockerfileのベストプラクティスを考えてみた"},{"categories":["Docker"],"contents":"経緯 「Dockerを使用するメリットがわからない」という質問を受けたので、\nDockerを使うと何が嬉しいか、とても簡潔に説明します。\nDockerのメリットを全てを解説するわけではなく、\n学習する上で取っ掛かりになればいいなと思って書いたものです。\nDockerとは 詳しくはこちらを御覧ください。\nざっくりいうと、「軽量で起動の早い、仮想環境を簡単に作れるソフトウェア」です。\nコンテナってなに？ 上記の解説を読むと、Dockerについて以下のように説明されています。\n Dockerは、インフラ関係やDevOps界隈で注目されている技術の一つで、 Docker社が開発している、コンテナ型の仮想環境を作成、配布、実行するためのプラットフォームです。\n ではこのコンテナってなんでしょうか。\nイメージを掴みましょう。\nざっくり解説すると、コンテナとはDockerで作れる仮想空間だと思ってください。\n一般的にWindowsPCにLinuxOSをインストールすることはできませんよね。\n(ここではWSL2については触れません。。。)\nしかしコンテナを使用すると、できてしまいます。\nローカルPCとは全く切り離された仮想空間をコンテナ内に作り、\nその中に別のOSをインストールすることができるのです。\nコンテナ内にOSが用意でき、そのOSに様々なソフトウェアをインストールさせられます。\n便利ですね。\nイメージを掴んだ後はこちらのような解説サイトで詳しく学ぶことをオススメします。\nコンテナの由来 Dockerで使われているコンテナという技術は、運送業界で使われているコンテナに由来していると言われています。\nよくアクション映画で港でドンパチやるときに周りに沢山おいてあるこれです。\nこのコンテナは規格が統一されていて、\n規格にあったシャーシさえあればトラックにも電車にも飛行機にも、\n何にでも載せることができます。\nコンテナが何に積まれているかは関係ありませんし、コンテナの中身が外部に影響を与えることもありません。\nこの可搬性をシステム上で再現したものがコンテナ技術です。\n話をDockerに戻して当てはめて考えてみると、以下のようになります。\n「コンテナの中身が何であろうと、\nDockerというシャーシさえインストールされていれば、LinuxでもMacでもWindowsでもクラウドでもどんな環境にもコンテナを載せることができる。」\n残念ながら、現実のコンテナのように、\n「コンテナが何に積まれているかは関係なく、コンテナの中身が外部に影響を与えることもない。」レベルでの可搬性はないのですが、\n目指しているのはその可搬性です。\nDockerを使うと何が嬉しいか ここで本題です。\nDockerのメリットは多々あります。\n生成や破棄が容易であったり、ミドルウェアも含めた構成を簡単に他人とシェアできたり。\n今までの仮想化技術では、\nゲストOS起動時にハードウェアのチェックなども行うので起動が遅かったが、\nコンテナではそれがないので早いなど。\nただここでは可搬性にフォーカスして解説します。\n現在多くのサーバーにはLinuxが使われています。\nですがシステム開発ではWindowsやMacが使用されています。\n本番環境と開発環境で環境が違うわけです。\nそうするとしばしば\n「Windows環境では動いたけどLinuxでは動かなくなった」\nという事象が発生します。\n最近では、\n「ローカル環境では動いたけどクラウド環境だと動かない」\nといった事象も耳にします。\nそこでDockerを使用します。\nコンテナの可搬性を活かし、\n環境間の差異をなくすことで、環境差に起因するエラーを極力減らすことができるのです。\nさいごに とても簡潔で必要な解説まで削ぎ落としている感を持ってこの記事を書いています。\nあくまで初めはこの程度の理解でいいというレベルです。\nこの記事が更なる学習の端緒に慣れば幸いです。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-2/","tags":["",""],"title":"Dockerを使うメリットを最低限の説明に絞って解説してみる"},{"categories":["Gadget"],"contents":"はじめに アウトプットする習慣を付けるためのブログということで最初の記事はガチガチの技術は避けて、\n「駆け出しエンジニアによる駆け出しエンジニアのためのノートPC選定観点メモ」を書き流して行こうと思います。\n前提として、プログラミングを行うノートPCを選定する観点です。\nまた、本記事を書いてる人がWindows派なので、基本Windowsのことを書いています。\n主に仕事で使っているPCはDynaBook UZ63/Dです。\nあくまでも経験年数少ない駆け出しの個人的な選定観点メモなので、参考程度のものです。\nOS 駆け出しエンジニアがノートPCを買うとき候補に上がるのはMacとWindowsかと思います。\n目的に合わせて自由に選んで良いと思います。\n  Macを選ぶべき人\n iOSアプリを作りたい人 デザインの勉強もしたい人 単純にMacが好き人    Windowsを選ぶべき人\n なるべく低コストでスペックの良いノートPCがほしい人 現場で使うノートPCのOSに慣れておきたい人    SESの場合、現場で支給されるノートPCの殆どはWindowsです。\n私としては、やりたいことがハッキリしていないのならば、\n最初の1台目はとりあえずコスパの良いWindowsを買うなり借りるなりして、\n将来的にMacも増やすのがベターなのかなと思ってます。\nMacは高いので。。。\nCPU Intel製のCPUの場合、i7 ,i5 ,i3 等の「Core iシリーズ」から選ぶのが良いですが、\n同時に世代にも注目したいです。\n新しい世代のCPUのほうが性能がいいです。\n私は下記のようなサイトを参考にCPUを選びました。\n 【Intel CPU】Core i9, Core i7, Core i5, Core i3の世代の一覧・見分け方のまとめ\nhttps://pssection9.com/archives/intel-corei7-corei5-corei3-gen-list-how-to-identify.html\n 予算が許すならできるだけ新しい世代のi7がいいです。\n第7世代のi7と第8世代のi3ならどちらが良いのかなどを詳しく比較したいなら、\n「CPU スコア」 などで検索してみると定量的なCPU性能比較が見られるのでおすすめです。\nその一方でCPUの性能の最低基準ですが、\n2020/12/31現在、私の所属会社では第5世代i5が最低基準となっているようです。\n私は一時期第5世代i5のノートPCでDocker使用し、\nnginx + Angular + Spring Boot + MySQLで社内開発を行っていましたが、\n確かに問題なく使用できていました。\n第5世代i5搭載のノートPCは中古で安価に買えるので、長持ちするかは運ですが選択肢としては有りです。\nまた、最近はIntel社の他にAMD社のCPUを搭載したノートPCをよく見ます。\n一昔前は、AMDの場合はAndroid StudioのエミュレータやDocker DeskTopが使えないといった不便がありました。\n今はAMDのシェアが増えたこともあってか環境が改善されつつありますが、\n別途AMD用に設定を行わないといけなかったり面倒そうな場面が見受けられます。\nトラブルシューティングの自信がない人はIntelが無難かもしれません。\nただAMDのCPU搭載ノートPCのほうが安価なので、下記のサイトのような情報を参考にしつつ、\n購入の選択肢に入れても良いと思います。\n 「Core i」と「Ryzen」の違いを比較【ざっくり解説】 https://pcfreebook.com/article/corei-ryzen-comparison-difference.html\n メモリ 8GBが最低基準です。\nブラウザのタブを沢山開いて調べ物をしつつプログラミングをするなら16GBを選んだほうが快適です。\n加えて、もしメモリを増設したいと考えているなら、\n購入したいノートPCがメモリ増設に対応しているか確認することが大事です。\n増設できない設計になっていたり、\nオンボードといってメモリがマザーボードに直接固定されているノートPCがあります。\nまた、2020/12/31現在、メモリの最大搭載容量が16GBのノートPCがとても多いです。 32GB積みたい場合はその観点からの調査が必要です。\n余談ですが、メモリを購入、増設する際には以下の点をよく確認してから作業をするのが良いです。\n 購入予定のメモリは、デスクトップ用か、ノートPC用か 購入予定のメモリは、搭載予定のノートPCのCPUに対応した規格のメモリか  メモリにも規格があるので注意が必要です。\n私は以下のサイトなどを参考にメモリを選びました。\n DDR4メモリとDDR3メモリの違いについて\nhttps://pssection9.com/archives/ddr4-ddr3-memory-difference.html\n ストレージ SSD搭載のものを選び、できれば256GB以上の容量が良いです。\nHDDはSSDと比べると低速なので私は選びません。\n中古の場合、新しめのノートPCでもHDDものもがあるので要確認です。\n容量について、128GBのノートPCを使ったことがありましたが、\nプログラミングに必要なアプリを揃えるだけで結構容量を食ってしまいました。 結局500GBのものに交換しました。\nストレージもメモリと同じく、\nオンボードで固定されていて後からSSDの交換ができないノートPCがありますので注意が必要です。\n解像度 フルHD以上が良いと考えています。\nHDなどの解像度が低いノートPCはそれだけ画面に表示できる情報量が少なくなります。\nフルHD以上の解像度が高いノートPCでは文字が小さくなるなどデメリットはありますが、\n一画面に表示できる情報量が作業効率に与える影響を考えるとフルHD以上を私は選んでいます。\n以下のようなサイトがわかりやすいかもしれません。\n フルＨＤとは？解像度とは？パソコンの解像度はどうやって選べはよい？ http://check-pc.com/pc/page6.html\n 液晶の大きさ ノートPCのなかで15.6インチのものが最もコスパが良いです。\n画面が大きく作業がしやすいのも良い点です。\nただ15.6インチは持ち歩くには大きいです。\n重さは2kg前後のものが多いです。\n13.3インチがA4サイズ、重さは1kgちょっとと持ち歩きやすいので、普段ノートPCを持ち歩く人や、\n休日スタバでドヤ顔でプログラミング(通称ドヤグラミング)をしたい人は13.3インチ前後がオススメです。\nできれば実物を見て確認した点です。\n液晶の光沢 液晶のには光沢液晶と非光沢液晶があります。\n光沢液晶は色が鮮やかに表現されますが、画面の映り込みが多いのがデメリットです。 映り込みが多いと目が疲れます。\n私はプログラミングをするなら非光沢液晶のものを選びます。\nキーボード配列 ノートPCの中には独特のキーボード配列を採用しているメーカーがあります。\n レノボのキーボードは、左下のCtrlとFNキーの位置が逆になっています(BIOSから変更できるらしい) パナソニックのLet\u0026rsquo;snoteシリーズでは、\nCtrlとFNキーが逆なことに加え、半角/全角の切り替えキーがF1キーの隣にあります HPのキーボードはBackSpace-Enter列の右側に更に一列キーが存在しています  他にも英語配列だったりエンターキーが小さかったりと癖があるキーボードのノートPCがあります。\n慣れれば問題ない、外付けキーボードを使えばいい等の話はありますが、\n生産性に直結する箇所なのでできるだけしっかり確認してから買いたいです。\nディスプレイの開閉角度 私は肩こりが酷いので、ノートPCを使うときはノートPCスタンドを使用して視点を上げています。\nノートPCスタンドを使うときはノートPCのお尻を持ち上げる分だけPCの画面を大きく開かなくてはいけません。\nもし不自由なくノートPCスタンドを使いたいなら、180°液晶の開くPCが良いです。\nまた他人にPC画面を見せる場面が多い人は、360°液晶が回るノートPCが良いかもしれません。\nその他 中古のノートPCのなかには、HDMI端子がないPCやBluetoothがないPCがあります。\nBluetoothがついてるとそれだけUSBポートを使わずに済んだり、\nコードで接続する手間がなくなったりするのでできればついていてほしいです。 プロジェクターに画面を写す機会がある人はHDMIの確認も必要です。\nまとめ 家族や知り合いにノートPCを買いたいと相談されることが増え、\n面倒くさいので話が長くなっては悪いのでポイッと渡せる資料を作ろうと思ったのがきっかけで書き始めました。\n大変私見塗れの偏った記事ですので、ご意見等頂ければ幸いです。\n","permalink":"https://practice-member.github.io/nandemo-output-blog/blog/post-1/","tags":["",""],"title":"駆け出しエンジニアの書くノートPC購入時の観点メモ"}]